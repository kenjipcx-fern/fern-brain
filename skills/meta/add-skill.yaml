# Add Skills to System
# ---------------------
# Meta skill for expanding Fern's capabilities by creating new skills

meta:
  version: 0.1.0
  name: Add Skills to System
  category: meta
  language: en-US

goal: Create and integrate new skills into Fern's capability system when encountering tasks that require capabilities not yet available.

research_methodology: |
  Before creating a new skill:
  1. Search existing skills to avoid duplication
  2. Research the domain/technology thoroughly
  3. Find 2-3 authoritative sources (docs, tutorials, best practices)
  4. Look for common patterns and potential failure modes
  5. Identify prerequisites and tool requirements
  6. Study similar existing skills for format consistency

instructions: |
  1. Identify the skill gap:
     - What specific capability is missing?
     - What would this skill accomplish?
     - How does it fit with existing skills?
  
  2. Research the domain:
     - Find official documentation
     - Look for established best practices
     - Identify common tools and approaches
     - Note potential gotchas and failure modes
  
  3. Create skill YAML file:
     - Use toolprint format (see example below)
     - Include research methodology section
     - Add clear success criteria
     - Specify required tools and prerequisites
  
  4. Save and index the skill:
     - Save to `/fern-agent/skills/{category}/{skill-name}/skill.yaml`
     - Update `/fern-agent/skills/index.json`
     - Add to appropriate category folder
  
  5. Test the skill:
     - Try executing on a simple example
     - Refine instructions based on results
     - Update confidence level

tools:
  - file_editor
  - terminal
  - web_search

skill_template: |
  # {Skill Name}
  # -------------
  # Brief description of what this skill accomplishes
  
  meta:
    version: 0.1.0
    name: {Skill Name}
    category: {frontend|backend|devops|integration|meta}
    language: en-US
  
  goal: {Clear statement of what this skill achieves}
  
  research_methodology: |
    Domain-specific research approach:
    1. {What to research first}
    2. {Key documentation sources}
    3. {Common patterns to understand}
    4. {Potential issues to investigate}
  
  instructions: |
    1. {Step by step instructions}
    2. {Include decision points}
    3. {Cover error handling}
    4. {Include validation steps}
  
  tools:
    - {required_tool_1}
    - {required_tool_2}
  
  prerequisites:
    - {prerequisite_skill_1}
    - {prerequisite_skill_2}
  
  success_criteria:
    - {Measurable outcome 1}
    - {Measurable outcome 2}
    - {Validation method}
  
  common_failure_modes:
    - {Common issue 1 and how to avoid}
    - {Common issue 2 and how to avoid}

examples:
  basic_skill: |
    # Setup Express Server
    # -------------------
    # Create a basic Express.js server with essential middleware
    
    meta:
      version: 0.1.0
      name: Setup Express Server
      category: backend
      language: en-US
    
    goal: Create a production-ready Express.js server with basic middleware and error handling
    
    research_methodology: |
      Before implementing:
      1. Review Express.js official documentation
      2. Research current best practices for Express setup
      3. Check for security middleware recommendations
      4. Look up common Express server patterns
      5. Understand error handling approaches
    
    instructions: |
      1. Initialize npm project if not exists:
         - Run `npm init -y`
         - Install express: `npm install express`
         - Install dev dependencies: `npm install -D nodemon`
      
      2. Create basic server structure:
         - Create `server.js` with Express app
         - Add basic middleware (cors, helmet, express.json)
         - Set up error handling middleware
         - Configure port and startup logic
      
      3. Add development setup:
         - Update package.json scripts
         - Create basic route for health check
         - Test server starts correctly
      
      4. Validate setup:
         - Server responds to requests
         - Middleware is functioning
         - Error handling works
    
    tools:
      - terminal
      - file_editor
    
    prerequisites:
      - basic-node-environment
    
    success_criteria:
      - Server starts without errors
      - Health check endpoint responds with 200
      - Error handling middleware catches errors
      - Development scripts work properly
    
    common_failure_modes:
      - Port already in use (check for conflicts)
      - Missing dependencies (verify package.json)
      - CORS issues (configure properly for frontend)

success_criteria:
  - New skill YAML file created in correct location
  - Skill index updated with new entry
  - Skill follows proper toolprint format
  - Research methodology included
  - Success criteria are measurable