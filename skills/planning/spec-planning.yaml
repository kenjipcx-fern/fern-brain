# Spec Planning + Acceptance Criteria (Enhanced)
# ----------------------------------------------
# Transform requirements into detailed technical specifications with sequential thinking integration

meta:
  version: 0.2.0
  name: Spec Planning + Acceptance Criteria (Enhanced)
  category: planning
  language: en-US

goal: Convert gathered requirements into detailed technical specifications with clear acceptance criteria, leveraging past experience and deep reflection for optimal planning.

research_methodology: |
  Before creating specifications:
  1. Search case memory for similar projects and successful patterns
  2. Research best practices for the specific technology domain
  3. Study architectural patterns relevant to the requirements
  4. Research testing approaches and validation methods
  5. Look for industry standards and compliance requirements
  6. Study potential risks and mitigation strategies

workflow_integration: |
  Upon starting this skill, add these tasks to todos.md:
  
  ## Current Phase: Spec Planning
  - [ ] Search memory for similar past specs
  - [ ] Use sequential thinking to analyze requirements against past work
  - [ ] Create initial architecture plan
  - [ ] Use sequential thinking to identify edge cases and risks
  - [ ] Refine spec based on reflection insights
  - [ ] Validate user experience flows
  - [ ] Create detailed acceptance criteria
  - [ ] Use sequential thinking for final spec validation
  - [ ] Update todos with task decomposition phase tasks
  - [ ] Mark spec planning complete

instructions: |
  1. Memory search and analysis:
     - Search `/fern-agent/memory/cases/` for similar projects
     - Look for specs that solved comparable problems
     - Identify successful patterns and approaches
     - Note past challenges and how they were overcome
  
  2. Sequential thinking: Requirements analysis
     - Use sequential thinking tool to deeply analyze requirements
     - Compare current needs with past successful projects
     - Identify potential modifications to proven patterns
     - Consider what made past specs successful or problematic
  
  3. System architecture and design:
     - High-level system architecture with component interactions
     - Database schema design with relationships and constraints
     - API design with endpoint specifications and contracts
     - Data flow diagrams and integration points
     - Technology stack selection with clear rationale
     - Infrastructure and deployment architecture
     - Security architecture and access control design
     - Performance and scalability planning based on requirements
     - Monitoring, logging, and observability design
  
  4. Sequential thinking: Edge case and risk analysis
     - Use sequential thinking to systematically identify:
       * Potential edge cases and failure modes
       * Performance bottlenecks and scalability issues
       * Security vulnerabilities and privacy concerns
       * Integration complexity and dependency risks
       * User experience pain points
  
  5. Spec refinement based on reflection:
     - Modify architecture to address identified risks
     - Add error handling and recovery mechanisms
     - Plan for monitoring and observability
     - Include fallback strategies for failures
     - Design for maintainability and extensibility
  
  6. User experience validation:
     - Map out complete user journeys
     - Validate that technical spec supports UX goals
     - Identify friction points in user flows
     - Ensure accessibility and inclusivity
     - Plan for responsive and performant interactions
  
  7. Detailed technical specifications:
     - Component-by-component implementation details
     - API contracts and data schemas
     - Security implementation approach
     - Performance requirements and optimization
     - Testing strategy and validation approach
  
  8. Sequential thinking: Final validation
     - Review complete spec for consistency and completeness
     - Validate against original requirements
     - Check for any remaining gaps or ambiguities
     - Ensure acceptance criteria are comprehensive
     - Confirm feasibility and timeline estimates

quality_guidelines: |
  High-quality specs must have:
  
  **User Experience Focus:**
  - User journeys clearly mapped and optimized
  - Loading states and error handling designed
  - Accessibility considerations included
  - Responsive design planned
  - Performance impact on UX considered
  
  **Technical Excellence:**
  - Architecture supports requirements and scale
  - Security and privacy built in from start
  - Error handling and recovery planned
  - Monitoring and debugging capabilities included
  - Code organization and maintainability considered
  
  **Validation and Testing:**
  - Acceptance criteria are specific and measurable
  - Testing strategy covers unit, integration, and e2e
  - Performance benchmarks defined
  - Security testing approach planned
  - User testing and feedback mechanisms included
  
  **Risk Management:**
  - Potential failure modes identified and mitigated
  - Dependencies and integration risks assessed
  - Timeline risks and mitigation strategies planned
  - Technical debt and maintenance considerations included

tools:
  - file_editor
  - web_search
  - conversation_search
  - memory_search
  - sequential-thinking
  - artifacts

output_format: |
  Create a comprehensive specification document under `/fern-agent/memory/current-task/spec.md`:
  
  ## Project Overview
  - Problem statement and objectives
  - Success criteria and business value
  - Key stakeholders and constraints
  
  ## Architecture Design
  - High-level system architecture with diagrams
  - Component breakdown and responsibilities
  - Technology stack with selection rationale
  - Data flow and integration points
  - Scalability and performance considerations
  
  ## Feature Specifications
  - Detailed feature descriptions with user stories
  - User interface mockups and interaction flows
  - Business logic and validation rules
  - Error handling and edge case management
  - Security and privacy implementation
  
  ## Technical Implementation
  - Database schema and relationships
  - API design and contracts
  - File structure and code organization
  - Configuration and environment setup
  - Third-party integrations and dependencies
  
  ## User Experience Design
  - Complete user journey mapping
  - Responsive design specifications
  - Accessibility implementation plan
  - Performance optimization for UX
  - Error states and recovery flows
  
  ## Acceptance Criteria
  - Functional requirements with test scenarios
  - Performance benchmarks and metrics
  - Security validation requirements
  - User experience success criteria
  - Integration and compatibility testing
  
  ## Implementation Roadmap
  - Development phases and milestones
  - MVP scope and iterative releases
  - Risk assessment and mitigation plans
  - Timeline estimates with dependencies
  - Success metrics and monitoring plan
  
  ## Sequential Thinking Insights
  - Key insights from reflection sessions
  - Risk mitigations identified through analysis
  - Adaptations made based on past experience
  - Areas requiring ongoing validation

success_criteria:
  - Spec addresses all requirements comprehensively
  - Architecture is feasible and appropriate for scale
  - User experience flows are optimized and validated
  - Edge cases and risks identified with mitigations
  - Acceptance criteria are specific and measurable
  - Past experience successfully leveraged
  - Sequential thinking insights documented
  - Implementation roadmap is realistic and detailed

common_failure_modes:
  - Not leveraging similar past specs (always search memory first)
  - Skipping sequential thinking reflection (use it liberally)
  - Focusing only on happy path (identify edge cases)
  - Technical spec doesn't support UX goals (validate flows)
  - Acceptance criteria too vague (make them measurable)
  - Not planning for failure modes (design resilience)
  - Unrealistic timeline estimates (factor in complexity)